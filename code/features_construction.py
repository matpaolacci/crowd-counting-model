import numpy as np
from scipy.ndimage import gaussian_filter
import pandas as pd
from tqdm.auto import tqdm
from dataframe_utils import printDataFrameMemUsage
from threading import Thread
from math import ceil

def _buildDensityMap(
        headPoints: np.ndarray, 
        height: int, 
        width: int,
        sigma: float,
        nCpu: int,
        threadFactor: int = 1
    ) -> np.ndarray:
    '''
        This function build the density map for an image, such map is used to describe the density
        of the head-points that are present inside an image. 

        @threadFactor: number of the thread per cpu
    '''

    # Build the empty density map 
    densityMap = np.zeros((height, width), dtype=np.float32)
    nPoints = headPoints.shape[0]
    
    if(nPoints <= 0):
        return densityMap
    
    #Â Is the number of points executed at each time
    nThread = nCpu * threadFactor
    nIterations = ceil(nPoints/nThread)

    with tqdm(total=nPoints) as pbar:
        pbar.set_description("> Building a dens-map {}x{} of {} points".format(height, width, nPoints))
        
        for i in range(nIterations): 
            arrayPortion = headPoints[slice(nThread * i, nThread * (i + 1), 1)]
            threads: list[DensMapBuilder] = []

            # Starting nThread threads
            for point in arrayPortion:
                t = DensMapBuilder(point, height, width, sigma)
                t.start()
                threads.append(t)
            
            # Retrieving the maps generated by the nThreads and sum up this to density_map
            for t_i in range(len(threads)):
                threads[t_i].join()
                densityMap += threads[t_i].resultDensMap
                del threads[t_i].resultDensMap
                threads[t_i] = None
            
            pbar.update(nThread)
                
    return densityMap


def buildDensityMaps(
        imagesDf: pd.DataFrame, 
        sigma: float = 3.0, 
        nCpu: int = 1,
        threadFactor: int = 4
    ) -> None:
    '''
        Take in input a pandas dataframe with the images and related head points, then
            it builds a density map for each image in the dataframe, hence put this maps
            into a column of the dataframe.

        @param nCpu: number of the cpu on the machine.
    '''
    densityMapColumn = []

    print("> Building {} density maps...".format(len(imagesDf)))
    for row in imagesDf.itertuples(index=False):
        img: np.ndarray = row[1]
        headPoints: np.ndarray = row[2]
        densityMapColumn.append(
            _buildDensityMap(
                headPoints, 
                height=img.shape[0], 
                width=img.shape[1], 
                sigma=sigma, 
                nCpu=nCpu,
                threadFactor=threadFactor
            )
        )
    
    imagesDf['dens_map'] = densityMapColumn
    print("> Density maps successfully created")
    printDataFrameMemUsage(imagesDf)


class DensMapBuilder(Thread):
    def __init__(self, headPoint: np.ndarray, height: int, width: int, sigma: float):
        Thread.__init__(self)
        self.resultDensMap = None
        self.headPoint = headPoint
        self.height = height
        self.width = width
        self.sigma = sigma
    
    def worker(self) -> np.ndarray:
        '''
            This function is what a thread do, that is to build a density map of a single point
        '''
        dots = np.zeros((self.height, self.width), dtype=np.float32)
        dots[self.headPoint[1], self.headPoint[0]] = 1.
        self.resultDensMap = gaussian_filter(dots, sigma=self.sigma, mode='constant')
        del dots

    def run(self):
        self.worker()

    